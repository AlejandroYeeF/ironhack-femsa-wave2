openapi: 3.0.1
info:
  title: E-commerce API
  description: API for operate users, orders, and customer support.
  version: 1.0.0
servers:
  - url: https://dev.test-ecommerce.com
    description: develop server

tags:
  - name: Users
    description: Endpoints related to user management
  - name: Orders
    description: Endpoints related to order processing
  - name: Tickets
    description: Endpoints related to customer support tickets

paths:
  /users:
    post:
      tags:
      - Users
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User successfully registered
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/login:
    post:
      tags:
      - Users
      summary: Authenticate a user and generate a token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{userId}:
    get:
      tags:
      - Users
      summary: Get user profile
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          
    patch:
      tags:
      - Users
      summary: Update user profile
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
            examples:
              userProfileUpdateExample:
                summary: Update user profile example
                value:
                  name: "Alejandro Yee"
                  address: "Alguna avenida #123"
                  phoneNumber: "+521234567890"
      responses:
        '200':
          description: User successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
      - Users
      summary: Delete a user account
      parameters:
        - name: userId
          in: path
          description: ID of the user to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User successfully deleted
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders:
    post:
      tags:
      - Orders
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        '201':
          description: Order created successfully
        '400':
          description: Invalid order data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/{orderId}:
    get:
      tags:
      - Orders
      summary: Get order details
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    patch:
      tags:
      - Orders
      summary: Update an existing order
      parameters:
        - name: orderId
          in: path
          description: ID of the order to update
          required: true
          schema:
            type: string
      requestBody:
        description: Information to update in the order
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderUpdate'
            examples:
              orderUpdateExample:
                summary: Order update example
                value:
                  status: "delivered"
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
      - Orders
      summary: Cancel an order.
      parameters:
        - name: orderId
          in: path
          description: ID of the order to cancel
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Order canceled successfully
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tickets:
    post:
      tags:
      - Tickets
      summary: Create a customer support ticket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupportTicketRequest'
      responses:
        '201':
          description: Ticket created
        '400':
          description: Invalid ticket data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tickets/{ticketId}:
    get:
      tags:
      - Tickets
      summary: Get support ticket status
      parameters:
        - name: ticketId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ticket status retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportTicket'
        '404':
          description: Ticket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    patch:
      tags:
      - Tickets
      summary: Update a support ticket
      parameters:
        - name: ticketId
          in: path
          description: ID of the support ticket to update
          required: true
          schema:
            type: string
      requestBody:
        description: Information to update in the support ticket
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupportTicketUpdate'
            examples:
              ticketUpdateExample:
                summary: Support ticket update example
                value:
                  status: "in progress"
      responses:
        '200':
          description: Support ticket updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportTicket'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Ticket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
      - Tickets
      summary: Close a support ticket.
      operationId: closeTicket
      parameters:
        - name: ticketId
          in: path
          description: ID of the support ticket to close.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Support ticket closed successfully.
        '404':
          description: Ticket not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    UserRegistration:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        fullName:
          type: string

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        token:
          type: string
        expiresIn:
          type: integer
          description: Token expiration time in seconds

    UserProfile:
      type: object
      properties:
        userId:
          type: string
        email:
          type: string
        fullName:
          type: string
        createdAt:
          type: string
          format: date-time
          
    UserProfileUpdate:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
        phoneNumber:
          type: string
          
    ErrorResponse:
      type: object
      properties:
        statusCode:
          type: integer
        message:
          type: string
        errors:
          type: array
          items:
            type: string
      required:
        - statusCode
        - message

    OrderRequest:
      type: object
      properties:
        userId:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'

    OrderItem:
      type: object
      properties:
        productId:
          type: string
        quantity:
          type: integer

    Order:
      type: object
      properties:
        orderId:
          type: string
        userId:
          type: string
        totalAmount:
          type: number
          format: float
        status:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
            
    OrderUpdate:
      type: object
      properties:
        status:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'

    SupportTicketRequest:
      type: object
      properties:
        userId:
          type: string
        subject:
          type: string
        description:
          type: string
          
    SupportTicket:
      type: object
      properties:
        ticketId:
          type: string
        userId:
          type: string
        subject:
          type: string
        description:
          type: string
        status:
          type: string
        createdDate:
          type: string
        updatedDate:
          type: string

    SupportTicketUpdate:
      type: object
      properties:
        status:
          type: string
